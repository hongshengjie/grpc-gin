package webapi

import (
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"github.com/golang/protobuf/protoc-gen-go/generator"
)

func init() {
	generator.RegisterPlugin(new(webapi))
}

const (
	contextPkg = "context"
	jsonPkg    = "encoding/json"
	fmtPkg     = "fmt"
	httpPkg    = "net/http"
	jsonpbPkg  = "github.com/gogo/protobuf/jsonpb"
)

type webapi struct {
	gen *generator.Generator
}

// Name identifies the plugin.
func (w *webapi) Name() string {
	return "webapi"
}

// Init is called once after data structures are built but before
// code generation begins.
func (w *webapi) Init(g *generator.Generator) {
	w.gen = g

}

// Generate produces the code generated by the plugin for this file,
// except for the imports, by calling the generator's methods P, In, and Out.
func (w *webapi) Generate(file *generator.FileDescriptor) {
	if len(file.FileDescriptorProto.Service) == 0 {
		return
	}
	w.gen.AddImport(contextPkg)
	w.gen.AddImport(jsonPkg)
	w.gen.AddImport(httpPkg)
	w.gen.AddImport(jsonpbPkg)

	for i, service := range file.FileDescriptorProto.Service {
		w.generateHander(file, service, i)
	}

}

// GenerateImports produces the import declarations for this file.
// It is called after Generate.
func (w *webapi) GenerateImports(file *generator.FileDescriptor) {

}

func (w *webapi) objectNamed(name string) generator.Object {
	w.gen.RecordTypeUse(name)
	return w.gen.ObjectNamed(name)
}

// Given a type name defined in a .proto, return its name as we will print it.
func (w *webapi) typeName(str string) string {
	return w.gen.TypeName(w.objectNamed(str))
}

func (w *webapi) P(args ...interface{}) { w.gen.P(args...) }

func (w *webapi) generateHander(file *generator.FileDescriptor, service *descriptor.ServiceDescriptorProto, index int) {
	var haveUnary bool
	for _, method := range service.GetMethod() {
		if !method.GetServerStreaming() && !method.GetClientStreaming() {
			haveUnary = true
		}
	}
	if !haveUnary {
		return
	}

	// generate server
	origServName := service.GetName()
	servName := generator.CamelCase(origServName)

	// WebApiServer
	w.P()
	w.P("type ", servName, "WebApiServer struct {")
	w.P("Svr ", servName, "Server")
	w.P("}")

	//New

	w.P()
	w.P("func New", servName, "WebApiServer(s ", servName, "Server) *", servName, "WebApiServer {")
	w.P("return &", servName, "WebApiServer{")
	w.P("Svr: s,")
	w.P("}")
	w.P("}")

	//Methods
	for _, m := range service.GetMethod() {
		methodName := generator.CamelCase(m.GetName())
		inType := w.typeName(m.GetInputType())

		w.P("func (s *", servName, "WebApiServer) ", methodName, "(w http.ResponseWriter, r *http.Request) {")
		w.P("var in ", inType)
		w.P(`err := jsonpb.Unmarshal(r.Body, &in)
		if err != nil {
			fmt.Fprint(w, err)
			return
		}`)
		w.P("resp, err := s.Svr.", methodName, "(context.TODO(), &in)")
		w.P(`if err != nil {
			fmt.Fprint(w, err)
			return
		}
		ret, err := json.Marshal(resp)
		if err != nil {
			fmt.Fprint(w, err)
			return
		}
		fmt.Fprint(w, string(ret))`)
		w.P("}")
	}

	//ServeHTTP

	w.P("func (s *", servName, "WebApiServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {")
	w.P("switch r.RequestURI {")
	for _, m := range service.GetMethod() {
		methodName := generator.CamelCase(m.GetName())
		w.P("case ", `"/`, file.GetPackage(), ".", servName, "/", methodName, `":`)
		w.P(" s.", methodName, "(w,r)")
	}

	w.P(`default:
		http.NotFound(w, r)
	}
	}`)

}
